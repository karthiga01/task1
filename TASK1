# Step 1: Install dependencies
!pip install flask flask-login pyngrok

# Step 2: Set your ngrok authtoken (REPLACE with your actual authtoken)
from pyngrok import ngrok, conf
conf.get_default().auth_token = "2xSfPpjgM7m8aGjaAk9tdSnAm5l_5YDHGkKrXGyTQEyrph6Pg"  # <-- Replace this line

# Step 3: Flask authentication system
import os
from flask import Flask, render_template_string, request, redirect, url_for
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash

# Initialize Flask app
app = Flask(__name__)
app.secret_key = os.urandom(24)

# User session management
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# In-memory user store
users = {}

class User(UserMixin):
    def __init__(self, id, username, password_hash):
        self.id = id
        self.username = username
        self.password_hash = password_hash

    def get_id(self):
        return self.id

@login_manager.user_loader
def load_user(user_id):
    return users.get(user_id)

# Basic HTML layout
layout = '''
<!DOCTYPE html>
<html><head><title>{{ title }}</title></head><body>
<h2>{{ title }}</h2>
{% with messages = get_flashed_messages() %}
  {% if messages %}
    <ul>{% for message in messages %}<li>{{ message }}</li>{% endfor %}</ul>
  {% endif %}
{% endwith %}
{{ body }}
</body></html>
'''

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if username in [u.username for u in users.values()]:
            return "Username already exists. Try another."
        user_id = str(len(users) + 1)
        password_hash = generate_password_hash(password)
        user = User(user_id, username, password_hash)
        users[user_id] = user
        return redirect(url_for('login'))
    return render_template_string(layout, title="Register", body='''
    <form method="post">
      Username: <input name="username"><br>
      Password: <input type="password" name="password"><br>
      <input type="submit" value="Register">
    </form>
    ''')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = next((u for u in users.values() if u.username == username), None)
        if user and check_password_hash(user.password_hash, password):
            login_user(user)
            return redirect(url_for('protected'))
        return "Invalid credentials"
    return render_template_string(layout, title="Login", body='''
    <form method="post">
      Username: <input name="username"><br>
      Password: <input type="password" name="password"><br>
      <input type="submit" value="Login">
    </form>
    ''')

@app.route('/protected')
@login_required
def protected():
    return render_template_string(layout, title="Protected Page", body=f'''
    <p>Welcome, {current_user.username}!</p>
    <p><a href="/logout">Logout</a></p>
    ''')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/')
def home():
    return redirect(url_for('login'))

# Start server with ngrok tunnel
port = 5000
public_url = ngrok.connect(port)
print(f"App is running at: {public_url}")
app.run(port=port)
